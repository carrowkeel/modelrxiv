### Uploading Models to modelRxiv

This page provides an overview of the process of uploading models, including details about implementing the modelRxiv protocol. Researchers are encouraged to upload their published or unpublished models to modelRxiv to allow a wider audience to access the model, manipulate parameters, and regenerate results.

#### Model Code

When you first open the upload page, you will see a blank textarea for your code. You can either provide code that conforms to the modelRxiv protocol or use the AI-assisted pipeline to convert it (recommended). To see an example of a simple model that is compatible with modelRxiv to use as a template, click the "Load example" button.

#### Model Scheme

The model scheme describes your model to modelRxiv, including its parameters and visual outputs. This allows modelRxiv to provide the appropriate adjustable parameters to users, and to create dynamic plots based on the output of running the model code. You can also add descriptions to the scheme to help users understand your model. To demonstrate the scheme, we consider a simple model of selection:

```python
def step(params: dict, last_step: dict, t: int) -> dict:
    ## Compute the next step given the last step and the model parameters
    if t == 0: ## When called the first time, return the initial frequency
        return {'q': params['q0']}
    q = last_step['q']
    s = params['s']
    h = params['h']
    q_prime = (q**2 * (1 - s) + q * (1 - q) * (1 - h * s)) / (q**2 * (1 - s) + 2 * q * (1 - q) * (1 - h * s) + (1 - q)**2)
    return {'q': q_prime}
```

The scheme is divided into sections: each section begins with a line starting with a hash character `#` followed by the type of section. The following lines are parameter definitions for the specific section.

The basic section of the scheme describes the study and possibly the publication to which the model relates. For instance, in the example below, the scheme metadata is filled with information relating to a specific publication:

```text
# Metadata
title=The Genetical Theory of Natural Selection
description=Natural Selection is not Evolution. Yet, ever since the two words have been in common use, the theory of Natural Selection has been employed as a convenient abbreviation for the theory of Evolution by means of Natural Selection, put forward by Darwin and Wallace. This has had the unfortunate consequence that the theory of Natural Selection itself has scarcely ever, if ever, received separate consideration.
authors=R. A. Fisher
doi=
type=published
publication_date=1930
keywords=natural-selection,evolution
framework=py
```

Note that the metadata also includes the field "framework", which indicates which coding framework the model code uses. This can either be "py" for Python or "js" for JavaScript.

Now we want to allow a parameter in the model to be "exposed" to the user, so that they can manipulate the parameter using the interface. We can do this by adding a "Parameter" section:

```text
# Parameter: s
name=s
description=The relative fitness cost of the allele
value=0.1
```

This adds a parameter `s` with a default value `0.1` to the model, with the label "s". The label can also contain an underscore character `_` to use subscript formatting.

Now that we have some model parameters, we can add plots. Plots take the output of the model code and connect them to a specific plot type. In the example below, we take the frequency of the allele from the model, the dynamic parameter `q`, and create a line plot for `q` over the time steps of the model:

```text
# Plot: Allele frequency over time
type=line
x=t
y=q
xlabel=Generations
ylabel=Frequency
```

In this example, we set the x-axis as `t`, which is the time step of the model, and the y-axis as `q`. We also added x- and y-axis labels. We could additionally set the x- and y-axis limits, for instance, using `xlim=0,0.5`. For available plots and parameters, see the list of visualizations.

#### Optional Scheme Features

In many cases it is helpful to guide users through specific scenarios of interest by providing parameter presets. If you provide presets with your model, they will be displayed to the user by default, instead of the list of parameters. They can then choose specific presets (which will run the model with the specific parameter set), and begin exploring the model by modifying the parameters around these scenarios of interest. Here are two example presets in our simple evolutionary model:

```text
# Preset: Positive selection, recessive
q0=0.1
s=-0.1
h=0

# Preset: Negative selection, dominant
q=0.5
s=0.1
h=1
```

You can add as many parameter definitions as you like to each preset. These will modify the existing user parameters and run the model, when clicked by a user.

#### Model Analyses

modelRxiv is aimed at models that can generate dynamics visualizations on-the-fly rather than running computationally intensive analyses that might take hours or days. However, seeing as models may include results that do not fit the step-wise dynamics display, modelRxiv also allows uploaders to specify a function in their code that can generate a figure. Analyses can operate similarly to a notebook, computing the grid and generating an image using the `matplotlib` function `plt.show()`. The result will be handled by modelRxiv and displayed in the browser. For instance, here we generate a grid and save the figure using `plt.show()`:

```python
import matplotlib.pyplot as plt

async def my_analysis(params):
    fig = plt.figure(figsize=(6,6)) # Create a square image
    plt.imshow(np.random.normal(size=(100,100), scale=params['s'], loc=0.5))
    plt.axis('off') # Remove axes
    plt.tight_layout(pad=0) # Remove padding around image
    plt.show()
```

In this example, we intentionally hide the axes and remove padding so that the image fits the square grid on modelRxiv. We can then specify the axes in the analysis definition in the model scheme, and specify `type=image` which indicates to modelRxiv that the code generates an image rather than returning data:

```text
# Analysis: generate_grid
function=my_analysis
type=image
xlabel=x
ylabel=y
xlim=0,100
ylim=0,100
```

In the example below, we define an analysis that generates a 2-dimensional grid figure.

```text
# Analysis: fixation_analysis_grid
function=run_fixation_grid
type=grayscale_2d
xlabel=s
ylabel=h
xlim=0,1
ylim=0,1
```

We can also return data and specify a plot type supported by modelRxiv (see visualizations below). In this example, we refer to a function `run_fixation_grid` that returns a 2-dimensional matrix with values between 0 and 1 (a grayscale matrix). For example, the following implementation runs the model dynamics for a grid of values and returns the appropriate data structure:

```python
# This function runs the model and returns 1 if the allele is close to fixation
async def single_run(params):
    last_step = None
    for t in range(0, int(params['step_num']) + 1):
        next_step = step(params, last_step, t)
        if not next_step:
            break
        last_step = next_step
    return int(last_step['q'] > 0.99)

async def run_fixation_grid(params):
    # Create a grid of parameters, this could also be done with loops
    s = np.linspace(0, 1, 51)
    h = np.linspace(0, 1, 51)
    grid_x, grid_y = np.meshgrid(s, h)
    grid = np.array([grid_x.reshape(len(s) * len(h)), grid_y.reshape(len(s) * len(h))]).T
    # Combine with input parameters
    param_sets = [{**params, 's': x_y[0], 'h': x_y[1]} for x_y in grid]
    # Distribute grid computation
    results = await distribute('single_run', param_sets)
    grayscale_matrix = np.array(results).reshape(len(s), len(h)).tolist()
    return grayscale_matrix
```

Note that we used the `distribute` function in order to compute the model results in parallel. This is handled by modelRxiv and ensures that computational resources are not overused by multiple analyses.

Now that we defined this analysis, we can also define presets that run it with different fixed parameters:

```text
# Preset: Fig. 2: Fixation grid (q0=0.5)
analysis=fixation_analysis_grid
q0=0.5

# Preset: Fig. 2: Fixation grid (q0=0.1)
analysis=fixation_analysis_grid
q0=0.1
```

When users click these presets, the grid will be computed by running the `run_fixation_grid` in your code. Users will see a progress bar on the preset while the result is being generated. We suggest avoiding analyses that take more than a few minutes to compute results (even with multi-threading), as users will likely navigate away from the page if the waiting time is too long.

#### Visualizations

modelRxiv currently supports a number of plots for dynamics data. These plots are listed below. For analyses, it is possible to use the Python library `matplotlib`; figures generated in analysis functions using matplotlib will appear in the browser as images.

- **Line Plot** Example:

  ```text
  # Plot: Population size over time
  type=line
  x=t
  y=N
  xlabel=Generations
  ylabel=Population size
  xlim=0,step_num
  ylim=0,K
  ```

  This plot takes output data from your step function, defined by `x=t` and `y=N`, and generates a line plot as the model runs. In this example, we also set limits for the axes using `xlim` and `ylim`. These fields take two numbers or parameter names separated by a comma. For `xlim`, we used `0,step_num`, meaning that the x-axis goes from 0 to the value of the `step_num` parameter, which is the parameter that tells modelRxiv how many iterations to run the dynamics for. For `ylim`, we used `0,K`, meaning that the y-axis goes from 0 to the value of a carrying capacity parameter `K`. This means that if the user updates these parameters, the plot limits will be updated. A step function that produces data for this plot might look like:

  ```python
  def step(params, last_step, t):
      K = params['K']
      r = params['r']
      if t == 0 or not last_step:
          return {'N': params['K'] / 2} # Set initial population size
      N = last_step['N']
      N_next = r * N * (1 - (N / K))
      return {'N': N_next}
  ```

  To be compatible with the line plot, `N` should be a number (it can be an int or a float). Note that while we need to return `N` for the dynamics plot, `t` does not need to be returned as it is provided to the dynamics plot by modelRxiv.

  To plot multiple lines, for instance if we had multiple populations, you can use a comma to separate the names of the output parameters. In the example below, we also use the `legend` parameter to specify how the lines will be annotated (with indices as subscript).

  ```text
  # Plot: Population size over time
  type=line
  x=t
  y=N1,N2
  xlabel=Generations
  ylabel=Population size
  xlim=0,step_num
  ylim=0,K
  legend=N_1,N_2
  ```
